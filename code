using System;
using System.Collections.Generic;

namespace ConsoleApp13
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Market market = new Market(0);

            market.Work();
        }
    }

    class Product
    {
        public Product(string name, int price)
        {
            Name = name;
            Price = price;
        }

        public string Name { get; private set; }
        public int Price { get; private set; }
    }

    

    class Client
    {
        public Client(int money, List<Product> products, int id)
        {
            Id = id;
            Money = money;
            _products = products;
        }

        private List<Product> _products = new List<Product>();
        public int Id { get; private set; }
        public int Money { get; private set; }

        public void ShowProducts()
        {
            for (int i = 0; i < _products.Count; i++)
            {
                Console.WriteLine(_products[i].Name + " " + _products[i].Price);
            }
        }

        public bool CheckMoney(int money)
        {
            return money <= Money;            
        }

        public void TakeProduct(Product product)
        {
            _products.Add(product);
        }

        public Product ReturnProduct(int id)
        {
            return _products[id];
        }

        public int ReturnProductsCount()
        {
            int count = _products.Count;

            return count;
        }

        public Product GiveProduct()
        {
            Product product = _products[_products.Count - 1];
            _products.Remove(product);
            return product;
        }

        public int GiveMoney(int id)
        {
            Money -= _products[id].Price;
            return _products[id].Price;
        }

        public int MakeChoice(Product product, int id)
        {
            if (CheckMoney(product.Price) == true)
            {
                Console.WriteLine("Клиент купил " + product.Name);

                return GiveMoney(id);
            }
            else
            {
                Console.WriteLine("Пришлось вернуть " + product.Name);

                GiveProduct();
            }

            return 0;
        }
    }

    class Market
    {
        public Market(int money)
        {
            _money = money;
        }

        private List<Product> _products = new List<Product>();
        private int _money = 0;

        public bool CheckProduct(Client client, string userInput, List<Product> products)
        {
            for (int i = 0; i < products.Count; i++)
            {
                if (products[i].Name.ToLower() == userInput.ToLower())
                {
                    client.TakeProduct(_products[i]);

                    _products.RemoveAt(i);

                    return true;
                }
            }

            return false;
        }

        public void TakeMoney(int price)
        {
            _money += price;
        }

        public void ShowMoney()
        {
            Console.WriteLine("Денег в кассе: " + _money);
        }

        public void ShowProducts()
        {
            foreach (Product product in _products)
            {
                Console.WriteLine("Название товара: " + product.Name + " Цена товара: " + product.Price);
            }
        }

        public void TransferProduct(Client client, string userInput)
        {
            if (CheckProduct(client, userInput, _products) == false)
            {
                Console.WriteLine("Такого продукта нет в магазине");
            }           
        }

        public void Work()
        {
            Queue<Client> clients = new Queue<Client>();

            AddProducts(_products);

            MakeQueue(clients);

            PayAtTheCHeckout(clients);
        }

        private void AddProducts(List<Product> products)
        {
            List<Product> assortment = new List<Product>();
            int minimalProductsCount = 1;
            int maximalProductsCount = 6;

            assortment.Add(new Product("Замороженные котлеты", 120));
            assortment.Add(new Product("Огурец", 20));
            assortment.Add(new Product("Помидор", 30));
            assortment.Add(new Product("Сосиски", 250));
            assortment.Add(new Product("Колбаса", 300));
            assortment.Add(new Product("Свинина", 250));
            assortment.Add(new Product("Фумигатор", 1000));
            assortment.Add(new Product("Креветки", 700));
            assortment.Add(new Product("Растворимый кофе", 319));
            assortment.Add(new Product("Арбуз", 300));
            assortment.Add(new Product("Соковыжималка", 1499));
            assortment.Add(new Product("Печенье", 58));
            assortment.Add(new Product("Сыр", 215));

            for (int i = 0; i < assortment.Count; i++)
            {
                int productsCount = userUtils.GenerateRandomNumber(minimalProductsCount, maximalProductsCount);

                for (int j = 0; j < productsCount; j++)
                {
                    products.Add(assortment[i]);
                }
            }
        }

        private void MakeQueue(Queue<Client> clients)
        {
            int minimalCustomersNumber = 1;
            int maximalCustomersNumber = 6;
            int randomCustomersNumber = userUtils.GenerateRandomNumber(minimalCustomersNumber, maximalCustomersNumber);
            int numberOfCustomer = 0;

            for (int i = 0; i < randomCustomersNumber; i++)
            {
                Client client = AddNewClient(numberOfCustomer);

                FillClientBasket(client);

                clients.Enqueue(client);

                Console.WriteLine("клиент " + client.Id + " взял:");

                client.ShowProducts();
                numberOfCustomer++;
            }
        }

        private void FillClientBasket(Client client)
        {
            ConsoleKeyInfo commandKey;
            bool isWorking = true;
            string userInput = null;

            while (isWorking)
            {
                Console.WriteLine("Выбрать товар - Q");
                Console.WriteLine("Показать список товаров - W");
                Console.WriteLine("Пойти к кассе - E");

                commandKey = Console.ReadKey(true);

                if (commandKey.Key == ConsoleKey.Q)
                {
                    AddProduct(client, userInput);
                }
                else if (commandKey.Key == ConsoleKey.W)
                {
                    ShowProducts();
                }
                else if (commandKey.Key == ConsoleKey.E)
                {
                    break;
                }
            }
        }

        private Client AddNewClient(int numberOfCustomer)
        {
            int minimalMoney = 50;
            int maximalMoney = 2000;

            List<Product> customerProducts = new List<Product>();
            Client client = new Client(userUtils.GenerateRandomNumber(minimalMoney, maximalMoney), customerProducts, numberOfCustomer);
            Console.WriteLine("Деньги клиента номер " + numberOfCustomer + ": " + client.Money);

            return client;
        }

        private void PayAtTheCHeckout(Queue<Client> clients)
        {
            int numberOfCustomer = 0;

            while (clients.Count > 0)
            {
                Client client = clients.Peek();

                for (int j = 0; j < client.ReturnProductsCount(); j++)
                {                   
                    TakeMoney(client.MakeChoice(client.ReturnProduct(j), j));
                }

                if (client.ReturnProductsCount() == 0)
                {
                    Console.WriteLine("Клиент ушёл, ничего не купив");
                }

                Console.WriteLine("Клиент " + client.Id + " закончил свои покупки и ушёл!");
                Console.WriteLine("У него осталось " + client.Money + "денег");

                clients.Dequeue();

                numberOfCustomer--;

                ShowMoney();
            }

            Console.WriteLine("Очередь опустела!");
        }

        private void AddProduct(Client client, string userInput)
        {
            Console.WriteLine("Выберите товар");

            userInput = Console.ReadLine();

            TransferProduct(client, userInput);

            Console.WriteLine("В корзине:");

            client.ShowProducts();
        }
    }

    class userUtils
    {
        public static Random random = new Random();

        public static int GenerateRandomNumber(int minimalNumber, int maximalNumber)
        {
            int number;

            number = random.Next(minimalNumber, maximalNumber);
            return number;
        }
    }
}
