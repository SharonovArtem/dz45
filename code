using System;
using System.Collections.Generic;

namespace ConsoleApp13
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Market market = new Market();

            market.Work();
        }
    }

    class Product
    {
        public Product(string name, int price)
        {
            Name = name;
            Price = price;
        }

        public string Name { get; private set; }
        public int Price { get; private set; }
    }

    class BoxOffice
    {
        private int _money;

        public BoxOffice(int money)
        {
            _money = money;
        }

        public bool TryGetMoney(Client client, int money)
        {
            if (money <= client.Money)
            {
                return true;
            }

            return false;
        }

        public bool TryGetProduct(string userInput, List<Product> products)
        {
            for (int i = 0; i < products.Count; i++)
            {
                if (products[i].Name.ToLower() == userInput.ToLower())
                {
                    return true;
                }
            }

            return false;
        }

        public void TakeMoney(int price)
        {
            _money += price;
        }
    }

    class Client
    {
        private List<Product> _products = new List<Product>();

        public Client(int money, List<Product> products, int id)
        {
            Id = id;
            Money = money;
            _products = products;
        }
        public int Id { get; private set; }
        public int Money { get; private set; }

        public List<Product> GetProducts()
        {
            List<Product> products = _products;
            return products;
        }

        public void ShowProducts()
        {
            for (int i = 0; i < _products.Count; i++)
            {
                Console.WriteLine(_products[i].Name + " " + _products[i].Price);
            }
        }

        public void TakeProduct(Product product)
        {
            _products.Add(product);
        }

        public Product GiveProduct()
        {
            Product product = _products[_products.Count - 1];
            _products.Remove(product);
            return product;
        }

        public int GiveMoney(int price)
        {
            Money -= price;
            return price;
        }
    }

    class Market
    {
        private Client _client = new Client(0, null, 0);
        private BoxOffice _boxOffice = new BoxOffice(0);
        private List<Product> _products = new List<Product>();

        public void ShowProducts()
        {
            foreach (Product product in _products)
            {
                Console.WriteLine("Название товара: " + product.Name + " Цена товара: " + product.Price);
            }
        }

        public void TransferProduct(Client client, string userInput)
        {
            if (_boxOffice.TryGetProduct(userInput, _products) == true)
            {
                for (int i = 0; i < _products.Count; i++)
                {
                    if (_products[i].Name.ToLower() == userInput.ToLower())
                    {
                        client.TakeProduct(_products[i]);

                        _products.RemoveAt(i);
                        break;
                    }
                }
            }
            else 
            {
                Console.WriteLine("Такого продукта нет в магазине");
            }
        }

        public void Work()
        {
            Queue<Client> clients = new Queue<Client>();
            Product product = new Product(null, 0);

            AddProducts(_products);

            MakeQueue(clients);

            PayAtTheCHeckout(clients, product);
        }

        public void AddProducts(List<Product> products)
        {
            List<Product> assortment = new List<Product>();
            Random random = new Random();

            assortment.Add(new Product("Замороженные котлеты", 120));
            assortment.Add(new Product("Огурец", 20));
            assortment.Add(new Product("Помидор", 30));
            assortment.Add(new Product("Сосиски", 250));
            assortment.Add(new Product("Колбаса", 300));
            assortment.Add(new Product("Свинина", 250));
            assortment.Add(new Product("Фумигатор", 1000));
            assortment.Add(new Product("Креветки", 700));
            assortment.Add(new Product("Растворимый кофе", 319));
            assortment.Add(new Product("Арбуз", 300));
            assortment.Add(new Product("Соковыжималка", 1499));
            assortment.Add(new Product("Печенье", 58));
            assortment.Add(new Product("Сыр", 215));

            for (int i = 0; i < assortment.Count; i++)
            {
                for(int j = 0; j < random.Next(1, 6); j++)
                {
                    products.Add(assortment[i]);
                }
            }
        }

        public void MakeQueue(Queue<Client> clients)
        {
            Random random = new Random();
            ConsoleKeyInfo commandKey;
            int minimalCustomersNumber = 1;
            int maximalCustomersNumber = 6;
            int minimalMoney = 50;
            int maximalMoney = 2000;
            int randomCustomersNumber = random.Next(minimalCustomersNumber, maximalCustomersNumber);
            int numberOfCustomer = 0;
            bool isWorking = true;
            string userInput;            

            for (int i = 0; i < randomCustomersNumber; i++)
            {
                List<Product> customerProducts = new List<Product>();
                Client client = new Client(random.Next(minimalMoney, maximalMoney), customerProducts, numberOfCustomer);
                Console.WriteLine("Деньги клиента номер " + numberOfCustomer + ": " + client.Money);

                while (isWorking)
                {
                    Console.WriteLine("Выбрать товар - Q");
                    Console.WriteLine("Показать список товаров - W");
                    Console.WriteLine("Пойти к кассе - E");
                    commandKey = Console.ReadKey(true);

                    if (commandKey.Key == ConsoleKey.Q)
                    {
                        Console.WriteLine("Выберите товар");
                        userInput = Console.ReadLine();

                        TransferProduct(client, userInput);

                        Console.WriteLine("В корзине:");

                        client.ShowProducts();
                    }
                    else if (commandKey.Key == ConsoleKey.W)
                    {
                        ShowProducts();
                    }
                    else if (commandKey.Key == ConsoleKey.E)
                    {
                        break;
                    }
                }

                clients.Enqueue(client);

                Console.WriteLine("клиент " + client.Id + " взял:");

                client.ShowProducts();
                numberOfCustomer++;
            }
        }

        public void PayAtTheCHeckout(Queue<Client> clients, Product product)
        {
            product = new Product(null, 0);
            Random random = new Random();
            int numberOfCustomer = 0;

            while (clients.Count > 0)
            {
                Client client = clients.Peek();

                for (int j = 0; j < clients.Peek().GetProducts().Count; j++)
                {
                    if (_boxOffice.TryGetMoney(client, client.GetProducts()[j].Price) == true)
                    {
                        _boxOffice.TakeMoney(client.GiveMoney(client.GetProducts()[j].Price));

                        Console.WriteLine("Клиент купил " + client.GetProducts()[j].Name);
                        Console.WriteLine("Осталось денег: " + client.Money);
                    }
                    else if (_boxOffice.TryGetMoney(client, client.GetProducts()[j].Price) == false)
                    {
                        Console.WriteLine("Пришлось вернуть " + client.GetProducts()[j].Name);

                        clients.Peek().GiveProduct();
                    }
                }

                Console.WriteLine("Клиент " + client.Id + " закончил свои покупки и ушёл!");

                clients.Dequeue();

                numberOfCustomer--;

                if (numberOfCustomer == 0)
                {
                    Console.WriteLine("Очередь опустела!");

                    return;
                }
            }
        }
    }
}
